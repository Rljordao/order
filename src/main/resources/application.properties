spring.application.name=order-service
server.port=${SERVER_PORT:8082}

spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost}:${KAFKA_PORT:29092}
spring.cloud.stream.default-binder=kafka
spring.cloud.stream.binders.kafka.environment.spring.kafka.consumer.bootstrap-servers=${KAFKA_HOST:localhost}:${KAFKA_PORT:29092}
spring.cloud.stream.default.group=order-group-id
spring.cloud.stream.default.client.id=order-client-id
spring.cloud.stream.kafka.default.producer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.default.producer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Configuração do Kafka
spring.cloud.stream.kafka.bindings.orders-output-out-0.producer.client.id=order-service-producer
spring.cloud.stream.bindings.orders-output-out-0.producer.required-groups=productA-groups
spring.cloud.stream.binders.kafka.environment.spring.kafka.properties.isolation.level=read_committed
spring.cloud.stream.binders.kafka.environment.spring.kafka.producer.bootstrap-servers=${KAFKA_HOST:localhost}:${KAFKA_PORT:29092}
spring.cloud.stream.binders.kafka.environment.spring.kafka.producer.ssl.enabled=false

# Configuração do Producer
spring.cloud.stream.bindings.orders-output-out-0.producer.client.id=order-service-producer
spring.cloud.stream.bindings.orders-output-out-0.destination=productB-order-events
spring.cloud.stream.bindings.orders-output-out-0.producer.acks=all
spring.cloud.stream.bindings.orders-output-out-0.producer.retries=3
spring.cloud.stream.bindings.orders-output-out-0.producer.transaction-id-prefix=tx-
spring.cloud.stream.bindings.orders-output-out-0.producer.enable-idempotence=true

# Configuração do destino do consumidor
spring.cloud.stream.bindings.orderInput-in-0.destination=productA-order-events
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.enableDlq=true
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.dlqName=productA-order-events-dlq

# Configuração de retry e backoff
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.backOffInitialInterval=1000
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.backoff-initial-interval=2.0
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.maxAttempts=3

# Configuração de polling e processamento
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.concurrency=1
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.ackMode=MANUAL
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.max-poll-records=1
spring.cloud.stream.kafka.bindings.orderInput-in-0.consumer.start-offset=earliest



# Configurações sqlserver
spring.datasource.url=jdbc:sqlserver://${SQLSERVER_HOST:localhost}:${SQLSERVER_PORT:1433};databaseName=${SQLSERVER_DATABASE:order_ambev};encrypt=false
spring.datasource.username=${MSSQL_SA_USERNAME:sa}
spring.datasource.password=${MSSQL_SA_PASSWORD:MyP@ssw0rd123}
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.database-platform=org.hibernate.dialect.SQLServer2016Dialect
spring.datasource.hikari.pool-name=HikariCP
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=600000

